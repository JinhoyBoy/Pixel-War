services:
  traefik:
    image: traefik:v2.9
    command:
      - "--providers.docker=true"
      - "--api.insecure=true"
      - "--entrypoints.backend.address=:80"
      - "--entrypoints.backend.forwardingTimeouts.responseHeaderTimeout=10s"
      - "--entrypoints.backend.forwardingTimeouts.readTimeout=10s"
      - "--entrypoints.backend.forwardingTimeouts.writeTimeout=10s"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - frontend
      - backend
    deploy:
      replicas: 1
      labels:
        - "traefik.enable=true"
  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./backend/redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - backend

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: pixelwar
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d pixelwar"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  pixel_service:
    image: pixel_service_image
    depends_on:
      - redis
      - postgres
    env_file:
      - ./backend/pixel_service/.env
    ports:
      - "8000:8000"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      networks:
        - backend
        - frontend

  event_service:
    image: event_service_image
    depends_on:
      - redis
    ports:
      - "8001:8001"
    deploy:
      replicas: 3
      labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event_service.entrypoints=web"
      - "traefik.http.routers.event_service.rule=Path(`/ws`)"
      - "traefik.http.services.event_service.loadbalancer.server.port=80"
      # Sticky Sessions falls gew√ºnscht:
      #- "traefik.http.services.event_service.loadbalancer.sticky=true"
      #- "traefik.http.services.event_service.loadbalancer.sticky.cookie.name=session"
      restart_policy:
        condition: on-failure
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:80/health"]
        interval: 30s
        retries: 3s
        timeout: 10s
        start_period: 40s
      networks:
        - backend
        - frontend
      #expose:
      #  - "80"

  frontend:
    image: frontend_image
    ports:
      - "3000:3000"
    depends_on:
      - pixel_service
      - event_service
    environment:
      - NODE_ENV=production

volumes:
  postgres_data: